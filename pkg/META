version = "%%VERSION%%"
description = "Type-driven code generation"
ppx = "./ppx_deriving"

package "api" (
  version = "%%VERSION%%"
  description = "Plugin API for ppx_deriving"
  requires = "dynlink compiler-libs.common ppx_tools"
  archive(byte) = "ppx_deriving.cma"
  archive(native) = "ppx_deriving.cmxa"
  exists_if = "ppx_deriving_main.cma"
)

package "main" (
  version = "%%VERSION%%"
  description = "Runner for ppx_deriving"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_main.cma"
  archive(native) = "ppx_deriving_main.cmxa"
  exists_if = "ppx_deriving_main.cma"
)

package "std" (
  version = "%%VERSION%%"
  description = "Meta-package for all built-in derivers"
  requires  = "ppx_deriving.show ppx_deriving.eq ppx_deriving.ord"
  requires += "ppx_deriving.enum ppx_deriving.iter ppx_deriving.map"
  requires += "ppx_deriving.fold ppx_deriving.create"
)

package "show" (
  version = "%%VERSION%%"
  description = "[@@deriving show]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_show.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_show.cma"
  archive(ppx_driver, native) = "ppx_deriving_show.cmxa"
  exists_if = "ppx_deriving_show.cma"
)

package "eq" (
  version = "%%VERSION%%"
  description = "[@@deriving eq]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_eq.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_eq.cma"
  archive(ppx_driver, native) = "ppx_deriving_eq.cmxa"
  exists_if = "ppx_deriving_eq.cma"
)

package "ord" (
  version = "%%VERSION%%"
  description = "[@@deriving ord]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_ord.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_ord.cma"
  archive(ppx_driver, native) = "ppx_deriving_ord.cmxa"
  exists_if = "ppx_deriving_ord.cma"
)

package "enum" (
  version = "%%VERSION%%"
  description = "[@@deriving enum]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_enum.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_enum.cma"
  archive(ppx_driver, native) = "ppx_deriving_enum.cmxa"
  exists_if = "ppx_deriving_enum.cma"
)

package "iter" (
  version = "%%VERSION%%"
  description = "[@@deriving iter]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_iter.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_iter.cma"
  archive(ppx_driver, native) = "ppx_deriving_iter.cmxa"
  exists_if = "ppx_deriving_iter.cma"
)

package "map" (
  version = "%%VERSION%%"
  description = "[@@deriving map]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_map.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_map.cma"
  archive(ppx_driver, native) = "ppx_deriving_map.cmxa"
  exists_if = "ppx_deriving_map.cma"
)

package "fold" (
  version = "%%VERSION%%"
  description = "[@@deriving fold]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_fold.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_fold.cma"
  archive(ppx_driver, native) = "ppx_deriving_fold.cmxa"
  exists_if = "ppx_deriving_fold.cma"
)

package "create" (
  version = "%%VERSION%%"
  description = "[@@deriving create]"
  requires(-ppx_driver) = "ppx_deriving"
  ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_create.cma"
  requires(ppx_driver) = "ppx_deriving.api"
  archive(ppx_driver, byte) = "ppx_deriving_create.cma"
  archive(ppx_driver, native) = "ppx_deriving_create.cmxa"
  exists_if = "ppx_deriving_create.cma"
)
